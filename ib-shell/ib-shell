#!/usr/bin/python
import os, sys, subprocess, json, threading, tty, termios, select, time, argparse, textwrap
import websocket # needs apt-get install python-websocket on ubuntu
import requests # needs apt-get install python-requests on ubuntu

class ConnectionError(Exception):
    pass

def connect(api_key, device_id, mode):
    r = requests.get(
        url = 'https://info-beamer.com/api/v1/device/%d' % device_id,
        auth = ('', api_key),
    )
    device = r.json()
    print("------------------------------")
    print("Device %d (Serial %s)" % (device_id, device['serial']))
    print(u"%s - %s" % (device['description'], device['location']))
    print("------------------------------")

    r = requests.post(
        url = 'https://info-beamer.com/api/v1/device/%d/session' % device_id,
        auth = ('', api_key),
        data = {'mode': mode},
    )
    r.raise_for_status()
    terminal = r.json()
    print("Connecting in %s mode" % (terminal['mode'],))
    ws = websocket.create_connection(
        url = terminal['endpoint'],
        timeout = 10,
    )

    def recv():
        type, data = ws.recv_data()
        if type != websocket.ABNF.OPCODE_TEXT:
            raise ConnectionError("unexpected packet")
        return json.loads(data)

    def send(**pkt):
        ws.send(json.dumps(pkt))

    print("Waiting for device")
    pkt = recv()
    if pkt['event'] != 'connected':
        raise ConnectionError("didn't get connection")

    size = subprocess.check_output(['stty', 'size'])
    rows, cols = [int(v) for v in size.strip().split()]
    send(event='setup', rows=rows, cols=cols)

    ws.settimeout(None)
    forwarding = True

    def forward_stdin():
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        tty.setraw(sys.stdin)
        stdin = os.fdopen(fd, 'rb', 0)
        last_keep_alive = time.time()
        while forwarding:
            s = select.select([stdin], [], [], 0.5)[0]
            if not s:
                if time.time() - last_keep_alive > 30:
                    send(event='keepalive')
                    last_keep_alive = time.time()
                continue
            inp = stdin.read(1)
            if not inp:
                break
            send(event='stdin', data=inp)
            if inp == '\x04':
                break
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    stdin_sender = threading.Thread(target=forward_stdin)
    stdin_sender.start()

    while 1:
        try:
            pkt = recv()
        except:
            break
        if pkt['event'] == 'data':
            sys.stdout.write(pkt['data'])
            sys.stdout.flush()
        elif pkt['event'] == 'eof':
            break
    forwarding = False
    stdin_sender.join()
    print("Session exited")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=textwrap.dedent("""
        Allows you terminal access to your info-beamer device.
        You must set the API_KEY environment variable to your
        info-beamer API key before invoking this tool. You can
        find your key on https://info-beamer.com/account
    """))
    parser.add_argument("device_id", type=int, help='device ID to connect to')
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--root", dest='mode', action='store_const', const='root', help='request full root access')
    group.add_argument("--viewer", dest='mode', action='store_const', const='viewer', help="request limited access (default)")
    args = parser.parse_args()
    api_key = os.getenv('API_KEY')
    if api_key is None:
        print("Please set the API_KEY environment variable to your API key. You can get it from https://info-beamer.com/account")
        sys.exit(1)
    connect(api_key, args.device_id, args.mode or 'viewer')
